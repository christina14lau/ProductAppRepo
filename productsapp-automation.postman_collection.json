{
	"info": {
		"_postman_id": "cee7a349-e156-4521-8d74-edac2e4ae0ae",
		"name": "productsapp-automation",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "43597526",
		"_collection_link": "https://christina-5768303.postman.co/workspace/Christina's-Workspace~9868da44-e073-48ff-83af-e80449eef685/collection/43597526-cee7a349-e156-4521-8d74-edac2e4ae0ae?action=share&source=collection_link&creator=43597526"
	},
	"item": [
		{
			"name": "Get All Products",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"\r",
							"// ✅ UPDATED Product 1 expectations\r",
							"pm.test(\"Product 1 - Id is 1\", () => {\r",
							"    pm.expect(jsonData[0].Id).to.equal(1);\r",
							"});\r",
							"pm.test(\"Product 1 - Name is Potato Soup\", () => {\r",
							"    pm.expect(jsonData[0].Name).to.equal(\"Potato Soup\");\r",
							"});\r",
							"pm.test(\"Product 1 - Category is Schmoceries\", () => {\r",
							"    pm.expect(jsonData[0].Category).to.equal(\"Schmoceries\");\r",
							"});\r",
							"pm.test(\"Product 1 - Price is 42\", () => {\r",
							"    pm.expect(jsonData[0].Price).to.equal(42);\r",
							"});\r",
							"\r",
							"// ✅ Unchanged Product 2\r",
							"pm.test(\"Product 2 - Id is 2\", () => {\r",
							"    pm.expect(jsonData[1].Id).to.equal(2);\r",
							"});\r",
							"pm.test(\"Product 2 - Name is Yo-yo\", () => {\r",
							"    pm.expect(jsonData[1].Name).to.equal(\"Yo-yo\");\r",
							"});\r",
							"pm.test(\"Product 2 - Category is Toys\", () => {\r",
							"    pm.expect(jsonData[1].Category).to.equal(\"Toys\");\r",
							"});\r",
							"pm.test(\"Product 2 - Price is 3.75\", () => {\r",
							"    pm.expect(jsonData[1].Price).to.equal(3.75);\r",
							"});\r",
							"\r",
							"// ✅ Unchanged Product 3\r",
							"pm.test(\"Product 3 - Id is 3\", () => {\r",
							"    pm.expect(jsonData[2].Id).to.equal(3);\r",
							"});\r",
							"pm.test(\"Product 3 - Name is Hammer\", () => {\r",
							"    pm.expect(jsonData[2].Name).to.equal(\"Hammer\");\r",
							"});\r",
							"pm.test(\"Product 3 - Category is Hardware\", () => {\r",
							"    pm.expect(jsonData[2].Category).to.equal(\"Hardware\");\r",
							"});\r",
							"pm.test(\"Product 3 - Price is 16.99\", () => {\r",
							"    pm.expect(jsonData[2].Price).to.equal(16.99);\r",
							"});\r",
							"\r",
							"pm.test(\"response to be 200 OK\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://localhost:44326/api/products",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "44326",
					"path": [
						"api",
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Product by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"\r",
							"pm.test(\"Id is 1\", () => {\r",
							"    pm.expect(jsonData.Id).to.equal(1);\r",
							"});\r",
							"\r",
							"pm.test(\"Name is Potato Soup\", () => {\r",
							"    pm.expect(jsonData.Name).to.equal(\"Potato Soup\");\r",
							"});\r",
							"\r",
							"pm.test(\"Category is Schmoceries\", () => {\r",
							"    pm.expect(jsonData.Category).to.equal(\"Schmoceries\");\r",
							"});\r",
							"\r",
							"pm.test(\"Price is 42\", () => {\r",
							"    pm.expect(jsonData.Price).to.equal(42);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is 200 OK\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://localhost:44326/api/products/1",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "44326",
					"path": [
						"api",
						"products",
						"1"
					]
				}
			},
			"response": []
		}
	]
}